name: newspaper_scraper
on: 
  workflow_dispatch:
    inputs:
      triggered_by:
        description: 'Who triggered this workflow'
        required: false
        default: 'manual'
        type: string
      timestamp:
        description: 'When this workflow was triggered'
        required: false
        type: string
# on:
#   schedule:
#     - cron: "*/30 * * * *"

jobs:
  scrape:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Check out this repo
        uses: actions/checkout@v4

      # Using Python's built-in dependency caching
      - name: Set up Python with dependency caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          # This automatically handles creating, saving, and restoring the pip cache.
          # It's smart enough to use a hash of your requirements.txt file.
          cache: 'pip'

      - name: Cache Apt packages
        id: cache-apt
        uses: actions/cache@v4
        with:
          # Apt's package archive directory
          path: /var/cache/apt/archives
          # A key that includes the OS and a hash of this workflow file.
          # The cache is invalidated only when you change the list of apt packages in this file.
          key: ${{ runner.os }}-apt-cache-${{ hashFiles('.github/workflows/newspaper_scraper.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-cache-

      - name: Installed package list
        run: apt list --installed
        
      - name: Update apt repository
        run: sudo apt-get update -y
        
      - name: Install system dependencies
        run: sudo apt-get install -y --no-install-recommends git libxml2-dev libxslt-dev python3-dev python3-lxml
        
      # This step will now always run, but will be very fast on a cache hit
      # because setup-python has already restored the downloaded packages.
      - name: Install Python dependencies
        run: pip install -r requirements.txt
        
      - name: Expose GitHub secrets as individual environment variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          secrets=$(echo "$SECRETS_CONTEXT" | jq -r 'to_entries[] | select(.key != "WG_CONFIG_FILE") | .key + "=" + .value')
          echo "$secrets" >> $GITHUB_ENV
          
      # - name: Start SSH via tmate
      #   uses: P3TERX/ssh2actions@main
      #   # Send connection info to Telegram (optional)
      #   # You can find related documents here: https://core.telegram.org/bots
      #   env:
      #     TELEGRAM_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      #     TELEGRAM_CHAT_ID: ${{ secrets.ERROR_MESSAGE_CHAT_ID }}
      # - name: Set up WireGuard Connection
      #   uses: niklaskeerl/easy-wireguard-action@v2
      #   with:
      #     WG_CONFIG_FILE: ${{ secrets.WG_CONFIG_FILE }}
      
      - name: Run the script
        run: python main.py
        working-directory: .
